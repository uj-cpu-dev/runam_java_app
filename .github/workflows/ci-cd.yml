name: Build, Push & Deploy (Java 24 + MongoDB)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: runam_java
  CONTAINER_NAME: run-am-java-app
  APP_PORT: 8080

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 24
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: set-tag
        run: |
          TAG=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build with Maven
        run: |
          ./mvnw clean package -DskipTests
          # Rename for consistent Docker reference
          cp target/*.jar target/app.jar

      - name: Build Docker image
        run: |
          docker build \
            --build-arg MONGODB_URL=${{ secrets.MONGODB_URL }} \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }} .
          
          docker tag \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }} \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Push to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_KNOWN_HOSTS }}

      - name: Deploy to EC2
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          echo "üîÑ Starting deployment to EC2..."
          ssh -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
            "
            # 1. Docker Login
            echo 'üîê Logging into ECR...'
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com || { echo '‚ùå ECR login failed'; exit 1; }

            # 2. Stop old container
            echo 'üõë Stopping existing container...'
            docker stop ${{ env.CONTAINER_NAME }} || echo '‚ö†Ô∏è No running container to stop'

            # 3. Remove old container
            echo 'üóëÔ∏è Removing old container...'
            docker rm ${{ env.CONTAINER_NAME }} || echo '‚ö†Ô∏è No container to remove'

            # 4. Pull new image
            echo 'üì• Pulling new Docker image...'
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }} || { echo '‚ùå Image pull failed'; exit 1; }

            # 5. Run new container with debug info
            echo 'üöÄ Starting new container...'
            echo '‚ÑπÔ∏è Using MONGODB_URL: $MONGODB_URL'
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              -e MONGODB_URL='$MONGODB_URL' \
              -e SPRING_DATA_MONGODB_URI='$MONGODB_URL' \
              -e SPRING_DATA_MONGODB_DATABASE=test \
              --restart unless-stopped \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }} || { echo '‚ùå Container startup failed'; exit 1; }

            # 6. Health check
            echo 'üè• Performing health check...'
            sleep 10
            curl -v http://localhost:${{ env.APP_PORT }}/actuator/health
            if ! curl -s http://localhost:${{ env.APP_PORT }}/actuator/health | grep -q '\"status\":\"UP\"'; then
              echo 'üîç Checking container logs...'
              docker logs ${{ env.CONTAINER_NAME }}
              echo '‚ùå Health check failed'
              exit 1
            fi
            echo '‚úÖ Deployment successful!'
            "
