name: Build, Push & Deploy (Java 24 + MongoDB)

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: runam_java
  CONTAINER_NAME: run-am-java-app
  APP_PORT: 8080
  MONGODB_DATABASE: test  # Added database name as environment variable

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 24
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: set-tag
        run: |
          TAG=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $TAG"

      - name: Build with Maven
        run: |
          ./mvnw clean package -DskipTests
          cp target/*.jar target/app.jar
          echo "JAR file built successfully"

      - name: Build and tag Docker image
        run: |
          set -e  # Exit immediately on error
          echo "Building Docker image..."
          
          FULL_IMAGE_TAG="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }}"
          
          docker build \
            --build-arg MONGODB_URL="${{ secrets.MONGODB_URL }}" \
            --build-arg SPRING_DATA_MONGODB_DATABASE="${{ env.MONGODB_DATABASE }}" \
            -t "$FULL_IMAGE_TAG" .
          
          echo "Tagging as latest..."
          docker tag "$FULL_IMAGE_TAG" \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Push to ECR
        run: |
          set -e
          echo "Pushing images to ECR..."
          
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image_tag }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          
          echo "Images pushed successfully"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_KNOWN_HOSTS }}

      - name: Deploy to EC2
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          SPRING_DATA_MONGODB_URI: "${{ secrets.MONGODB_URL }}/${{ env.MONGODB_DATABASE }}?authSource=admin"
        run: |
          set -e
          echo "Starting deployment to EC2 instance..."
          
          # Prepare deployment script
          DEPLOY_SCRIPT=$(cat << 'EOF'
          set -e
          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com || {
            echo "‚ùå ECR login failed"
            exit 1
          }

          echo "üõë Stopping existing container..."
          docker stop $CONTAINER_NAME >/dev/null 2>&1 || echo "‚ÑπÔ∏è No running container to stop"

          echo "üóëÔ∏è Removing old container..."
          docker rm $CONTAINER_NAME >/dev/null 2>&1 || echo "‚ÑπÔ∏è No container to remove"

          echo "üì• Pulling new Docker image..."
          docker pull $IMAGE_TAG || {
            echo "‚ùå Image pull failed"
            exit 1
          }

          echo "üöÄ Starting new container with these environment variables:"
          echo " - MONGODB_URL: $MONGODB_URL"
          echo " - SPRING_DATA_MONGODB_URI: $SPRING_DATA_MONGODB_URI"
          echo " - SPRING_DATA_MONGODB_DATABASE: $MONGODB_DATABASE"

          docker run -d \
            --name $CONTAINER_NAME \
            -p $APP_PORT:$APP_PORT \
            -e MONGODB_URL="$MONGODB_URL" \
            -e SPRING_DATA_MONGODB_URI="$SPRING_DATA_MONGODB_URI" \
            -e SPRING_DATA_MONGODB_DATABASE="$MONGODB_DATABASE" \
            --restart unless-stopped \
            $IMAGE_TAG || {
            echo "‚ùå Container startup failed"
            exit 1
          }

          echo "‚è≥ Waiting for application to start (30 seconds)..."
          sleep 30

          echo "üè• Performing health check..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$APP_PORT/actuator/health || true)
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Health check passed - application is running"
            echo "üìú Container logs:"
            docker logs $CONTAINER_NAME --tail 50
          else
            echo "‚ùå Health check failed (Status: $HEALTH_STATUS)"
            echo "üîç Last 100 lines of logs:"
            docker logs $CONTAINER_NAME --tail 100
            exit 1
          fi
          EOF
          )

          # Execute deployment script on EC2
          ssh -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
            "AWS_REGION=${{ env.AWS_REGION }} \
             AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} \
             CONTAINER_NAME=${{ env.CONTAINER_NAME }} \
             APP_PORT=${{ env.APP_PORT }} \
             IMAGE_TAG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }} \
             MONGODB_URL='$MONGODB_URL' \
             SPRING_DATA_MONGODB_URI='$SPRING_DATA_MONGODB_URI' \
             MONGODB_DATABASE=${{ env.MONGODB_DATABASE }} \
             bash -s" <<< "$DEPLOY_SCRIPT"